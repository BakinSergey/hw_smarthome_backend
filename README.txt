Домашнее задание
Веб-сервер "умного дома"

Цель:
Научиться пользоваться веб-фреймворками Rust.

Результатом является:
Веб-сервер "умного дома".

Описание/Пошаговая инструкция выполнения домашнего задания:
Реализовать с использованием веб-фреймворка HTTP сервер, реализующий функционал "Умного дома":

Библиотека "Умный дом" предоставляет динамическую структуру дома в комнатах которого расположены устройства.

Дом имеет название и содержит несколько помещений.
Библиотека позволяет запросить список помещений в доме, а также добавлять и удалять помещения.
Помещение имеет уникальное название и содержит названия нескольких устройств.
Устройство имеет уникальное в рамках помещения имя.
Библиотека позволяет получать список устройств в помещении, а также добавлять и удалять устройства.
Библиотека имеет функцию, возвращающую текстовый отчёт о состоянии дома.
Эта функция принимает в качестве аргумента обобщённый тип, позволяющий получить текстовую информацию
о состоянии устройства, для включения в отчёт. Эта информация должна предоставляться
для каждого устройства на основе данных о положении устройства в доме: имени комнаты и имени устройства.
Если устройство не найдено в источнике информации, то вместо текста о состоянии вернуть сообщение об ошибке.
В качестве источника данных о состоянии устройств можно использовать произвольный mock-объект.

Написать клиент с запросами к HTTP API умного дома.
Написать example общения с умным домом через HTTP клиент.

Дополнительное задание: хранить структуру дома в базе данных.


Критерии оценки:
Статус "Принято" ставится, если:

Присутствует весь функционал из описания.
Выполняются тесты функционала из описания.
Утилита cargo clippy не выдаёт предупреждений.
Команда cargo fmt --check не выдаёт предупреждений.

Компетенции:
Знание языка Rust
- создание веб-сервера

========================================================

Реализация

архитектура: Clean Architecture

в целях уменьшения объёма кода реализации
передача параметров большинства запросов
реализована с использованием url-параметров(a не payload)

стек:
Actix-Web, Diesel, Postgresql

Роутинг

POST    /api/v1/home/add/{name}                 - добавляет умный дом с именем {name}
DELETE  /api/v1/home/del/{name}                 - удаляет умный дом с именем {name}, всеми помещениями,
                                                  устройствами и отчетами
GET     /api/v1/home/list                       - список умных домов

POST    /api/v1/room/add/{home}/{name}          - добавляет в дом {home} помещение {name}
DELETE  /api/v1/room/del/{home}/{name}          - удаляет из дома {home} помещение {name} и все устройства в нем
GET     /api/v1/room/list/{home}/               - список помещений дома {home}

POST    /api/v1/device/add/{home}/{room}/{name} - добавляет в дом {home} в помещение {room} устройство {name}
DELETE  /api/v1/device/del/{home}/{room}/{name} - удаляет из дома {home} из помещения {room} устройство {name}
GET     /api/v1/device/list/{home}/{room}       - список устройств в помещении {room} дома {home}

POST     /api/v1/report/add/{home}              - создает отчет  о состоянии устройств дома {home}
GET     /api/v1/report/list/{home}              - список отчетов о состоянии устройств дома {home}

Модель БД
homes <= reports
homes <= rooms <= devices
все References таблиц связаны ON_DELETE CASCADE,
ограничения уникальности имен также описаны constraint-ами БД.

Отладка
Отладка и ручные тесты, выполнены с использованием встроенного в IDE JetBrains HTTP клиента,
файл http-запросов включен в репозиторий - rest-api.http
(подозреваю что эта оснастка будет работать в любой IDE JB).

Тесты
структура данных, создаваемых фикстурами описана в файле - /tests/integration/notes.txt
для запуска тестов использовать команду:
$ ENV=test cargo test -- --test-threads 1


Запуск на localhost:

1.Запустить контейнер с PG:
$ docker-compose up -d db (для тестов - db_test)

2.Установить diesel:
$ cargo install diesel_cli --no-default-features --features "postgres"

3.Инициализировать diesel:
$ diesel setup --database-url postgresql://pguser:wordpass@localhost/pgdb

4.Накатить миграции:
$ diesel migration run --database-url postgresql://pguser:wordpass@localhost/pgdb

5.Запуск сервера локально:
$ cargo run

6. Линтер форматтер:
$ cargo fmt --all -- --check
$ cargo clippy --all --all-targets
